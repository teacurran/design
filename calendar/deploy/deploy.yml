---
- name: Calendar
  hosts: 127.0.0.1
  gather_facts:
  connection: local
  vars:
    app_name: "calendar"
    app_version: "1.0"
    git_hash: "{{ git_hash_cmd_result.stdout }}"
    task_execution_role_arn: "arn:aws:iam::860331263758:role/calendar-ecs-execution-task-role"
    aws_account_id: "860331263758"
    aws_region: "us-east-1"
    ecr_hostname: "{{ aws_account_id }}.dkr.ecr.{{ aws_region }}.amazonaws.com"
    ecr_repository: "{{ ecr_hostname }}/{{ app_name }}"
    docker_image_tag: "{{ ecr_repository }}:{{ app_version }}"
    ecr_image_name: "{{ app_name }}"
    local_database_url: "postgresql://calendar:calendar@localhost:5432/calendar?schema=public"
    database_url: "postgresql://{{db_user}}:{{db_password}}@{{db_host}}:5432/{{db_name}}?schema=public"
    docker_file_name: "Dockefile"
    task_name: "api"
    env: "production"
    subnets:
      - "subnet-01cbf0d39e5db2894"
      - "subnet-0e3c68e42c2a46984"

  tasks:
    - name: Compute git hash
      command: "git rev-parse HEAD"
      register: git_hash_cmd_result
      tags: git

    - name: Get the current caller identity facts
      aws_caller_info:
      register: caller_info

    - name: Create ECS files directory {{item}}
      file:
        path: ./build/
        state: directory

    - name: Create ECS task definition
      template: src=templates/ecs_task_definition.json.j2
        dest=./build/ecs_task_definition.json
      tags: config

    - name: Login to ECR
      shell: "aws ecr get-login-password --region {{aws_region | quote}} | docker login --username AWS --password-stdin {{ecr_hostname}}"
      tags: ecr

    - name: Create ECR repository
      ecs_ecr: name={{app_name}}
      tags: ecr

    - name: Remove old buildx instance if it exists
      command: docker buildx rm calendar-multi-arch-builder
      ignore_errors: true
      tags:
        - docker

    - name: Create a new buildx instance
      command: docker buildx create --use --name calendar-multi-arch-builder --driver docker-container --buildkitd-flags '--oci-worker-net host --allow-insecure-entitlement network.host'
      tags:
        - docker

    - name: Inspect Docker builder
      command: docker buildx inspect --bootstrap
      register: docker_buildx_inspect_result
      tags:
        - docker

    - debug: msg="{{ docker_buildx_inspect_result.stdout }}"

    - debug: msg="docker buildx build --platform linux/arm64,linux/amd64 --allow network.host --network=host -t {{ecr_hostname}}/{{docker_image_tag}} --push -f Dockerfile ."

    - name: Build Docker image - docker buildx build --platform linux/arm64,linux/amd64 --allow network.host --network=host -t {{docker_image_tag}} -f {{docker_file_name}} .
      command: |
        docker buildx build
        --push
        --platform linux/arm64,linux/amd64
        -t {{ ecr_repository }}
        -t {{ docker_image_tag }}
        --build-arg DATABASE_URL="{{ local_database_url }}"
        .
      args:
        chdir: ../app/
      tags:
        - docker

    - name: tag ARM64 build
      command: |
        docker buildx build
        --push
        --platform linux/arm64
        --tag {{docker_image_tag}}-arm64
        .
      args:
        chdir: ../app/
      tags: upload

    - name: tag AMD64 build
      command: |
        docker buildx build
        --push
        --platform linux/amd64
        --tag {{docker_image_tag}}-amd64
        .
      args:
        chdir: ../app/
      tags: upload

    - name: Remove buildx instance
      command: docker buildx rm calendar-multi-arch-builder
      tags:
        - docker

    - name: Register ECS task definition
      command: "aws ecs register-task-definition --cli-input-json file://ecs_task_definition.json"
      args:
        chdir: ./build
      register: register_task_result
      tags: config

    - name: Create ECS web service
      ecs_service:
        state: present
        name: "{{app_name}}_{{task_name}}_{{env}}"
        cluster: "calendar-mostlycats-org"
        launch_type: FARGATE
        force_new_deployment: true
        network_configuration:
          subnets: "{{subnets}}"
          security_groups:
            - "sg-08a99c8c2bde0af35"
        task_definition: "{{app_name}}_{{task_name}}_{{env}}"
        desired_count: "1"
        deployment_configuration:
          minimum_healthy_percent: 100
          maximum_percent: 200
        load_balancers:
          - targetGroupArn: "arn:aws:elasticloadbalancing:us-east-1:860331263758:targetgroup/calendar/c3857bce011b2524"
            containerName: "{{app_name}}_{{task_name}}_{{env}}"
            containerPort: 3000
        delay: 30
        health_check_grace_period_seconds: 30
